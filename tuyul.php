PD9waHAKZGF0ZV9kZWZhdWx0X3RpbWV6b25lX3NldCgiQXNpYS9CYW5na29rIik7CmVycm9yX3JlcG9ydGluZygwKTsKCgpmdW5jdGlvbiBjYWxsKCRhZGRyKSB7CiAgICAkZGF0YT0gImFkZHJlc3M9JGFkZHImc3BvbnNvcj0xMDUwNyI7CiAgICAkY29rID0gdGVtcG5hbSgndG1wJywnYXZvJy5yYW5kKDEwMDAwMDAsOTk5OTk5OSkuJ3RtcC50eHQnKTsKICAgICRjID0gY3VybF9pbml0KCJodHRwczovL3RoZWJlc3RiaXRjb2luZmF1Y2V0LmNvbS8iKTsKICAgIGN1cmxfc2V0b3B0KCRjLCBDVVJMT1BUX1JFRkVSRVIsICJodHRwczovL3RoZWJlc3RiaXRjb2luZmF1Y2V0LmNvbS8iKTsKICAgIGN1cmxfc2V0b3B0KCRjLCBDVVJMT1BUX0ZPTExPV0xPQ0FUSU9OLCB0cnVlKTsKICAgIGN1cmxfc2V0b3B0KCRjLCBDVVJMT1BUX1VTRVJBR0VOVCwgIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzU5LjAuMzA3MS4xMTUgU2FmYXJpLzUzNy4zNiIpOwogICAgY3VybF9zZXRvcHQoJGMsIENVUkxPUFRfUE9TVEZJRUxEUywgJGRhdGEpOwogICAgY3VybF9zZXRvcHQoJGMsIENVUkxPUFRfUE9TVCwgdHJ1ZSk7CiAgICBjdXJsX3NldG9wdCgkYywgQ1VSTE9QVF9FTkNPRElORywgJ2d6aXAsIGRlZmxhdGUnKTsKICAgIC8vY3VybF9zZXRvcHQoJGMsIENVUkxPUFRfVkVSQk9TRSwgdHJ1ZSk7CiAgICBjdXJsX3NldG9wdCgkYywgQ1VSTE9QVF9TU0xfVkVSSUZZUEVFUiwgZmFsc2UpOwogICAgY3VybF9zZXRvcHQoJGMsIENVUkxPUFRfU1NMX1ZFUklGWUhPU1QsIDApOwogICAgY3VybF9zZXRvcHQoJGMsIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIDEpOwogICAgY3VybF9zZXRvcHQoJGMsIENVUkxPUFRfSEVBREVSLCB0cnVlKTsKICAgIGN1cmxfc2V0b3B0KCRjLCBDVVJMT1BUX0NPT0tJRUpBUiwgJGNvayk7CiAgICBjdXJsX3NldG9wdCgkYywgQ1VSTE9QVF9DT09LSUVGSUxFLCAkY29rKTsgCiAgICAvL2N1cmxfc2V0b3B0KCRjLCBDVVJMT1BUX0NPT0tJRUZJTEUsICRjb29raWUpOwogICAgJHJlc3BvbnNlID0gY3VybF9leGVjKCRjKTsKICAgICRodHRwY29kZSA9IGN1cmxfZ2V0aW5mbygkYyk7CiAgICAvLyRlcnJvciA9IGN1cmxfc3RyZXJyb3IoJGMpOwogICAgaWYgKCEkaHR0cGNvZGUpCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgZWxzZSB7CiAgICAgICAgJGhlYWRlciA9IHN1YnN0cigkcmVzcG9uc2UsIDAsIGN1cmxfZ2V0aW5mbygkYywgQ1VSTElORk9fSEVBREVSX1NJWkUpKTsKICAgICAgICAkYm9keSAgID0gc3Vic3RyKCRyZXNwb25zZSwgY3VybF9nZXRpbmZvKCRjLCBDVVJMSU5GT19IRUFERVJfU0laRSkpOwogICAgfQogICAgCiAkZGF0YT0gImZhdWNldGNsYWltPSRhZGRyIjsKICAgIAogICAgJGMgPSBjdXJsX2luaXQoImh0dHBzOi8vdGhlYmVzdGJpdGNvaW5mYXVjZXQuY29tLyIpOwogICAgY3VybF9zZXRvcHQoJGMsIENVUkxPUFRfUkVGRVJFUiwgImh0dHBzOi8vdGhlYmVzdGJpdGNvaW5mYXVjZXQuY29tLyIpOwogICAgY3VybF9zZXRvcHQoJGMsIENVUkxPUFRfRk9MTE9XTE9DQVRJT04sIHRydWUpOwogICAgY3VybF9zZXRvcHQoJGMsIENVUkxPUFRfVVNFUkFHRU5ULCAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNTkuMC4zMDcxLjExNSBTYWZhcmkvNTM3LjM2Iik7CiAgICBjdXJsX3NldG9wdCgkYywgQ1VSTE9QVF9QT1NURklFTERTLCAkZGF0YSk7CiAgICBjdXJsX3NldG9wdCgkYywgQ1VSTE9QVF9QT1NULCB0cnVlKTsKICAgIGN1cmxfc2V0b3B0KCRjLCBDVVJMT1BUX0VOQ09ESU5HLCAnZ3ppcCwgZGVmbGF0ZScpOwogICAgLy9jdXJsX3NldG9wdCgkYywgQ1VSTE9QVF9WRVJCT1NFLCB0cnVlKTsKICAgIGN1cmxfc2V0b3B0KCRjLCBDVVJMT1BUX1NTTF9WRVJJRllQRUVSLCBmYWxzZSk7CiAgICBjdXJsX3NldG9wdCgkYywgQ1VSTE9QVF9TU0xfVkVSSUZZSE9TVCwgMCk7CiAgICBjdXJsX3NldG9wdCgkYywgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgMSk7CiAgICBjdXJsX3NldG9wdCgkYywgQ1VSTE9QVF9IRUFERVIsIHRydWUpOwogICAgY3VybF9zZXRvcHQoJGMsIENVUkxPUFRfQ09PS0lFSkFSLCAkY29rKTsKICAgIGN1cmxfc2V0b3B0KCRjLCBDVVJMT1BUX0NPT0tJRUZJTEUsICRjb2spOyAKICAgICRyZXNwb25zZSA9IGN1cmxfZXhlYygkYyk7CiAgICAkaHR0cGNvZGUgPSBjdXJsX2dldGluZm8oJGMpOwogICAgLy8kZXJyb3IgPSBjdXJsX3N0cmVycm9yKCRjKTsKICAgIGlmICghJGh0dHBjb2RlKQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIGVsc2UgewogICAgICAgICRoZWFkZXIgPSBzdWJzdHIoJHJlc3BvbnNlLCAwLCBjdXJsX2dldGluZm8oJGMsIENVUkxJTkZPX0hFQURFUl9TSVpFKSk7CiAgICAgICAgJGJvZHkgICA9IHN1YnN0cigkcmVzcG9uc2UsIGN1cmxfZ2V0aW5mbygkYywgQ1VSTElORk9fSEVBREVSX1NJWkUpKTsKICAgIH0KICAgIHByZWdfbWF0Y2hfYWxsKCd
